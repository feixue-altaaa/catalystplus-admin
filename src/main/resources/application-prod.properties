# sharding-jdbc配置
# 内存模式
spring.shardingsphere.mode.type=Memory
# 打印SQl
spring.shardingsphere.props.sql-show=true
#------------------------数据源配置
# 配置真实数据源
#spring.shardingsphere.datasource.names=catalystplus-master,catalystplus-slave
spring.shardingsphere.datasource.names=library, user

# 配置第 1 个数据源
spring.shardingsphere.datasource.library.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.library.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.library.jdbc-url=jdbc:mysql://192.168.207.128:3306/catalystplus-master?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
#spring.shardingsphere.datasource.library.username=root
#spring.shardingsphere.datasource.library.password=123456
spring.shardingsphere.datasource.library.jdbc-url=jdbc:mysql://rm-uf6559759ltf66epvqo.mysql.rds.aliyuncs.com:2022/catalystplus-library
spring.shardingsphere.datasource.library.username=zqg0428
spring.shardingsphere.datasource.library.password=adofWfbUFfoB108W

spring.shardingsphere.datasource.user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.user.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.user.jdbc-url=jdbc:mysql://192.168.207.128:3306/catalystplus-user?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
#spring.shardingsphere.datasource.user.username=root
#spring.shardingsphere.datasource.user.password=123456
spring.shardingsphere.datasource.user.jdbc-url=jdbc:mysql://rm-uf6559759ltf66epvqo.mysql.rds.aliyuncs.com:2022/catalystplus-user
spring.shardingsphere.datasource.user.username=zqg0428
spring.shardingsphere.datasource.user.password=adofWfbUFfoB108W

## 配置第 2 个数据源, 读取源数据进行清洗
#spring.shardingsphere.datasource.server-order0.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.server-order0.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.server-order0.jdbc-url=jdbc:mysql://127.0.0.1:3306/catalystplus-master?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
#spring.shardingsphere.datasource.server-order0.username=root
#spring.shardingsphere.datasource.server-order0.password=123456
# 配置第 3 个数据源
#spring.shardingsphere.datasource.server-order1.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.server-order1.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.server-order1.jdbc-url=jdbc:mysql://192.168.100.201:3311/db_order
#spring.shardingsphere.datasource.server-order1.username=root
#spring.shardingsphere.datasource.server-order1.password=123456
#------------------------标准分片表配置（数据节点配置）
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
# 缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况

# catalystplus-user
spring.shardingsphere.rules.sharding.tables.user_institution.actual-data-nodes=user.user_institution
spring.shardingsphere.rules.sharding.tables.oauth_client_details.actual-data-nodes=user.oauth_client_details
spring.shardingsphere.rules.sharding.tables.opts.actual-data-nodes=user.opts
spring.shardingsphere.rules.sharding.tables.sys_permission.actual-data-nodes=user.sys_permission
spring.shardingsphere.rules.sharding.tables.sys_role.actual-data-nodes=user.sys_role
spring.shardingsphere.rules.sharding.tables.sys_role_permission.actual-data-nodes=user.sys_role_permission
spring.shardingsphere.rules.sharding.tables.sys_user_role.actual-data-nodes=user.sys_user_role
spring.shardingsphere.rules.sharding.tables.sys_user.actual-data-nodes=user.sys_user$->{0..4}
spring.shardingsphere.rules.sharding.tables.user_login_record.actual-data-nodes=user.user_login_record$->{0..4}

# server-order0.t_order0,server-order0.t_order1,server-order1.t_order0,server-order1.t_order1


# catalystplus-library
spring.shardingsphere.rules.sharding.tables.area.actual-data-nodes=library.area
spring.shardingsphere.rules.sharding.tables.customized_subscription.actual-data-nodes=library.customized_subscription
spring.shardingsphere.rules.sharding.tables.favourite_subject.actual-data-nodes=library.favourite_subject
spring.shardingsphere.rules.sharding.tables.journal.actual-data-nodes=library.journal
spring.shardingsphere.rules.sharding.tables.journal_subscription.actual-data-nodes=library.journal_subscription
spring.shardingsphere.rules.sharding.tables.publisher.actual-data-nodes=library.publisher
spring.shardingsphere.rules.sharding.tables.subject.actual-data-nodes=library.subject
spring.shardingsphere.rules.sharding.tables.tag.actual-data-nodes=library.tag
spring.shardingsphere.rules.sharding.tables.keyword.actual-data-nodes=library.keyword
spring.shardingsphere.rules.sharding.tables.institutions.actual-data-nodes=library.institutions
spring.shardingsphere.rules.sharding.tables.paper.actual-data-nodes=library.paper$->{0..9}
spring.shardingsphere.rules.sharding.tables.favourite_paper.actual-data-nodes=library.favourite_paper$->{0..9}
spring.shardingsphere.rules.sharding.tables.author_detail.actual-data-nodes=library.author_detail$->{0..9}
spring.shardingsphere.rules.sharding.tables.paper_cold.actual-data-nodes=library.paper_cold$->{0..9}
spring.shardingsphere.rules.sharding.tables.paper_keyword.actual-data-nodes=library.paper_keyword$->{0..9}
spring.shardingsphere.rules.sharding.tables.paper_tag.actual-data-nodes=library.paper_tag$->{0..9}


#广播表关联
#spring.shardingsphere.rules.sharding.tables.dict.actual-data-nodes=library.dict, user.dict

#------------------------分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
# 用于单分片键的标准分片场景
# 分片列名称
#spring.shardingsphere.rules.sharding.tables.paper.database-strategy.standard.sharding-column=id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.paper.database-strategy.standard.sharding-algorithm-name=alg_mod
#
#
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.paper_author.database-strategy.standard.sharding-column=paper_id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.paper_author.database-strategy.standard.sharding-algorithm-name=alg_mod
#
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.paper_keyword.database-strategy.standard.sharding-column=paper_id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.paper_keyword.database-strategy.standard.sharding-algorithm-name=alg_mod
#
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.paper_tag.database-strategy.standard.sharding-column=paper_id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.paper_tag.database-strategy.standard.sharding-algorithm-name=alg_mod
#------------------------分表策略
# 用于单分片键的标准分片场景

#-------------------------------
#      catalystplus-user
# 分片列名称     sys_user
spring.shardingsphere.rules.sharding.tables.sys_user.table-strategy.standard.sharding-column=id
# 分片算法名称   sys_user
spring.shardingsphere.rules.sharding.tables.sys_user.table-strategy.standard.sharding-algorithm-name=user_mod
# 分片列名称     user_login_record
spring.shardingsphere.rules.sharding.tables.user_login_record.table-strategy.standard.sharding-column=user_id
# 分片算法名称   user_login_record
spring.shardingsphere.rules.sharding.tables.user_login_record.table-strategy.standard.sharding-algorithm-name=user_mod


#-------------------------------
#      catalystplus-lirary
# 分片列名称     paper
spring.shardingsphere.rules.sharding.tables.paper.table-strategy.standard.sharding-column=id
# 分片算法名称   paper
spring.shardingsphere.rules.sharding.tables.paper.table-strategy.standard.sharding-algorithm-name=alg_mod
# 分片列名称     favourite_paper
spring.shardingsphere.rules.sharding.tables.favourite_paper.table-strategy.standard.sharding-column=paper_id
# 分片算法名称   favourite_paper
spring.shardingsphere.rules.sharding.tables.favourite_paper.table-strategy.standard.sharding-algorithm-name=alg_mod
# 分片列名称     author_detail
spring.shardingsphere.rules.sharding.tables.author_detail.table-strategy.standard.sharding-column=paper_id
# 分片算法名称   author_detail
spring.shardingsphere.rules.sharding.tables.author_detail.table-strategy.standard.sharding-algorithm-name=alg_mod
# 分片列名称     paper_cold
spring.shardingsphere.rules.sharding.tables.paper_cold.table-strategy.standard.sharding-column=paper_id
# 分片算法名称   paper_cold
spring.shardingsphere.rules.sharding.tables.paper_cold.table-strategy.standard.sharding-algorithm-name=alg_mod
# 分片列名称     paper_keyword
spring.shardingsphere.rules.sharding.tables.paper_keyword.table-strategy.standard.sharding-column=paper_id
# 分片算法名称   paper_keyword
spring.shardingsphere.rules.sharding.tables.paper_keyword.table-strategy.standard.sharding-algorithm-name=alg_mod
# 分片列名称     paper_tag
spring.shardingsphere.rules.sharding.tables.paper_tag.table-strategy.standard.sharding-column=paper_id
# 分片算法名称   paper_tag
spring.shardingsphere.rules.sharding.tables.paper_tag.table-strategy.standard.sharding-algorithm-name=alg_mod
#------------------------分片算法配置
# 行表达式分片算法
# 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type=INLINE
## 分片算法属性配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression=server-order$->{user_id % 2}
# 取模分片算法


#-------------------------------
#      catalystplus-user
# 分片算法类型  mod
spring.shardingsphere.rules.sharding.sharding-algorithms.user_mod.type=MOD
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.user_mod.props.sharding-count=5


#-------------------------------
#      catalystplus-lirary
# 分片算法类型  alg_mod
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type=MOD
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count=10
# 哈希取模分片算法
# 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type=HASH_MOD
## 分片算法属性配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count=5
#------------------------分布式序列策略配置


#-------------------------------
#      catalystplus-user
# 分布式序列列名称       sys_user
spring.shardingsphere.rules.sharding.tables.sys_user.key-generate-strategy.column=id
# 分布式序列算法名称     sys_user
spring.shardingsphere.rules.sharding.tables.sys_user.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列列名称       user_login_record
spring.shardingsphere.rules.sharding.tables.user_login_record.key-generate-strategy.column=id
# 分布式序列算法名称     user_login_record
spring.shardingsphere.rules.sharding.tables.user_login_record.key-generate-strategy.key-generator-name=alg_snowflake



#-------------------------------
#      catalystplus-lirary
# 分布式序列列名称       paper
spring.shardingsphere.rules.sharding.tables.paper.key-generate-strategy.column=id
# 分布式序列算法名称     paper
spring.shardingsphere.rules.sharding.tables.paper.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列列名称      favourite_paper
spring.shardingsphere.rules.sharding.tables.favourite_paper.key-generate-strategy.column=id
# 分布式序列算法名称    favourite_paper
spring.shardingsphere.rules.sharding.tables.favourite_paper.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列列名称       author_detail
spring.shardingsphere.rules.sharding.tables.author_detail.key-generate-strategy.column=id
# 分布式序列算法名称     author_detail
spring.shardingsphere.rules.sharding.tables.author_detail.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列列名称       paper_cold
spring.shardingsphere.rules.sharding.tables.paper_cold.key-generate-strategy.column=id
# 分布式序列算法名称     paper_cold
spring.shardingsphere.rules.sharding.tables.paper_cold.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列列名称       paper_keyword
spring.shardingsphere.rules.sharding.tables.paper_keyword.key-generate-strategy.column=id
# 分布式序列算法名称     paper_keyword
spring.shardingsphere.rules.sharding.tables.paper_keyword.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列列名称       paepr_tag
spring.shardingsphere.rules.sharding.tables.paper_tag.key-generate-strategy.column=id
# 分布式序列算法名称     paper_tag
spring.shardingsphere.rules.sharding.tables.paper_tag.key-generate-strategy.key-generator-name=alg_snowflake
#------------------------分布式序列算法配置
# 分布式序列算法类型
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE


# 分布式序列算法属性配置
#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=
#------------------------绑定表配置
# 绑定表规则列表   绑定编号必须有顺序0,1,2,3

#-------------------------------
#      catalystplus-user
spring.shardingsphere.rules.sharding.binding-tables[0]=sys_user, user_login_record

#-------------------------------
#      catalystplus-lirary  多对一，多写前面
#spring.shardingsphere.rules.sharding.binding-tables[0]=paper, favourite_paper
spring.shardingsphere.rules.sharding.binding-tables[1]=paper, paper_cold
spring.shardingsphere.rules.sharding.binding-tables[2]=paper_tag, paper
spring.shardingsphere.rules.sharding.binding-tables[3]=favourite_paper, paper
spring.shardingsphere.rules.sharding.binding-tables[4]=author_detail, favourite_paper
spring.shardingsphere.rules.sharding.binding-tables[5]=paper_keyword, paper
spring.shardingsphere.rules.sharding.binding-tables[6]=paper, favourite_paper






# 广播表关联
#spring.shardingsphere.rules.sharding.broadcast-tables[0]=dict